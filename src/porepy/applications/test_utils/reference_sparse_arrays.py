"""Known values for the tests are collected in this file.

For each test file, there should be a dictionary with the name of the test file. Inside
this dictionary, there should be a dictionary with the name of the test function/class,
containing the expected values for the test named according to what they are compared
to.

Underscores/private names are used for auxiliary variables not intended to be used
outside this file. These variables may be overwritten multiple times inside this file.
"""
import numpy as np
import scipy.sparse as sps

# test_mpsa.py
_data = np.array(
    [
        2.0,
        2.0,
        -4.0,
        -2.0,
        2.0,
        2.0,
        -4.0,
        -2.0,
        2.0,
        2.0,
        -4 / 3,
        -2 / 3,
        -2 / 3,
        2.0,
        2.0,
        -4.0,
        -2.0,
        2.0,
        2.0,
        -4.0,
        -2.0,
        2.0,
        2.0,
        -4 / 3,
        -2 / 3,
        -2 / 3,
        2.0,
        4.0,
        -4.0,
        2.0,
        1.5,
        0.5,
        -0.5,
        -4.0,
        2.0,
        4.0,
        -0.5,
        -1.5,
        -0.5,
        2.0,
        4.0,
        -4.0,
        2.0,
        1.5,
        0.5,
        -0.5,
        -4.0,
        2.0,
        4.0,
        -0.5,
        -1.5,
        -0.5,
        2.0,
        2.0,
        4.0,
        -2.0,
        2.0,
        2.0,
        4.0,
        -2.0,
        2.0,
        2.0,
        4 / 3,
        -2 / 3,
        -2 / 3,
        2.0,
        2.0,
        4.0,
        -2.0,
        2.0,
        2.0,
        4.0,
        -2.0,
        2.0,
        2.0,
        4 / 3,
        -2 / 3,
        -2 / 3,
        2.0,
        4.0,
        4.0,
        2.0,
        1.5,
        -0.5,
        -0.5,
        4.0,
        2.0,
        4.0,
        -0.5,
        1.5,
        -0.5,
        2.0,
        4.0,
        4.0,
        2.0,
        1.5,
        -0.5,
        -0.5,
        4.0,
        2.0,
        4.0,
        -0.5,
        1.5,
        -0.5,
    ]
)
_indices = np.array(
    [
        36,
        44,
        4,
        60,
        48,
        56,
        16,
        68,
        60,
        68,
        28,
        36,
        56,
        40,
        47,
        5,
        64,
        52,
        59,
        17,
        71,
        64,
        71,
        29,
        40,
        59,
        37,
        0,
        7,
        49,
        12,
        31,
        37,
        19,
        61,
        24,
        12,
        31,
        37,
        41,
        3,
        6,
        53,
        15,
        30,
        41,
        18,
        65,
        27,
        15,
        30,
        41,
        39,
        45,
        8,
        63,
        51,
        57,
        20,
        69,
        63,
        69,
        32,
        39,
        57,
        43,
        46,
        9,
        67,
        55,
        58,
        21,
        70,
        67,
        70,
        33,
        43,
        58,
        38,
        1,
        11,
        50,
        13,
        35,
        38,
        23,
        62,
        25,
        13,
        35,
        38,
        42,
        2,
        10,
        54,
        14,
        34,
        42,
        22,
        66,
        26,
        14,
        34,
        42,
    ]
)
_indptr = np.array(
    [
        0,
        1,
        2,
        4,
        5,
        6,
        8,
        9,
        10,
        13,
        14,
        15,
        17,
        18,
        19,
        21,
        22,
        23,
        26,
        27,
        28,
        29,
        30,
        33,
        34,
        35,
        36,
        39,
        40,
        41,
        42,
        43,
        46,
        47,
        48,
        49,
        52,
        53,
        54,
        56,
        57,
        58,
        60,
        61,
        62,
        65,
        66,
        67,
        69,
        70,
        71,
        73,
        74,
        75,
        78,
        79,
        80,
        81,
        82,
        85,
        86,
        87,
        88,
        91,
        92,
        93,
        94,
        95,
        98,
        99,
        100,
        101,
        104,
    ]
)
test_mpsa = {
    "TestAsymmetricNeumann": {
        "test_cart_3d": {"igrad": sps.csr_matrix((_data, _indices, _indptr))}
    }
}


_data = np.array(
    [
        -0.75,
        0.25,
        -2.0,
        -2.0,
        0.25,
        -0.75,
        2.0,
        -2.0,
        -2.0,
        2.0,
        -2 / 3,
        -2 / 3,
        -2 / 3,
        -2 / 3,
        2.0,
        -2.0,
        -2.0,
        2.0,
        2.0,
        2.0,
        2.0,
        -2.0,
        2.0,
    ]
)
_indices = np.array(
    [
        0,
        9,
        3,
        4,
        0,
        9,
        10,
        2,
        6,
        6,
        8,
        10,
        1,
        15,
        13,
        5,
        13,
        15,
        11,
        12,
        7,
        12,
        14,
    ]
)
_indptr = np.array([0, 2, 3, 4, 6, 7, 9, 10, 12, 14, 15, 17, 18, 19, 20, 22, 23])
test_mpsa["TestAsymmetricNeumann"]["test_cart_2d"] = {
    "igrad": sps.csr_matrix((_data, _indices, _indptr))
}

indptr = np.array(
    [
        0,
        3,
        7,
        10,
        14,
        17,
        21,
        24,
        28,
        32,
        37,
        41,
        46,
        50,
        54,
        58,
        62,
        66,
        71,
        75,
        80,
        85,
        90,
        95,
        101,
        106,
        111,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        124,
        125,
        127,
        129,
        131,
        133,
        135,
        137,
        139,
        141,
        142,
        143,
        144,
        145,
        146,
        147,
        148,
        149,
        150,
        151,
        153,
        155,
        156,
        157,
        159,
        161,
        163,
        165,
        167,
        169,
        171,
        173,
        175,
        177,
        178,
        179,
        181,
        183,
        184,
        185,
        187,
        189,
        191,
        192,
        193,
        195,
        196,
        197,
    ],
    dtype=np.int32,
)

indices = np.array(
    [
        31,
        40,
        47,
        1,
        32,
        36,
        48,
        33,
        42,
        43,
        3,
        34,
        38,
        44,
        27,
        39,
        49,
        5,
        28,
        35,
        50,
        29,
        41,
        45,
        7,
        30,
        37,
        46,
        27,
        31,
        52,
        54,
        9,
        28,
        32,
        53,
        56,
        29,
        33,
        51,
        58,
        11,
        30,
        34,
        55,
        57,
        35,
        39,
        60,
        62,
        36,
        40,
        59,
        66,
        37,
        41,
        61,
        64,
        38,
        42,
        63,
        65,
        43,
        47,
        68,
        74,
        17,
        44,
        48,
        72,
        73,
        45,
        49,
        67,
        70,
        19,
        46,
        50,
        69,
        71,
        51,
        52,
        67,
        68,
        75,
        53,
        54,
        59,
        60,
        76,
        61,
        62,
        69,
        70,
        77,
        23,
        55,
        56,
        71,
        72,
        78,
        57,
        58,
        63,
        64,
        79,
        65,
        66,
        73,
        74,
        80,
        75,
        76,
        77,
        78,
        79,
        80,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        12,
        35,
        13,
        36,
        14,
        37,
        15,
        38,
        4,
        39,
        0,
        40,
        6,
        41,
        2,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        21,
        53,
        8,
        54,
        55,
        56,
        24,
        57,
        10,
        58,
        21,
        59,
        12,
        60,
        22,
        61,
        12,
        62,
        24,
        63,
        14,
        64,
        25,
        65,
        13,
        66,
        67,
        68,
        22,
        69,
        18,
        70,
        71,
        72,
        25,
        73,
        16,
        74,
        20,
        75,
        76,
        77,
        26,
        78,
        79,
        80,
    ],
    dtype=np.int32,
)

data = np.array(
    [
        1.00000000e00,
        1.00000000e00,
        1.00000000e00,
        2.50000000e-01,
        1.00000000e00,
        1.00000000e00,
        1.00000000e00,
        1.00000000e00,
        1.00000000e00,
        1.00000000e00,
        2.50000000e-01,
        1.00000000e00,
        1.00000000e00,
        1.00000000e00,
        1.00000000e00,
        1.00000000e00,
        1.00000000e00,
        2.50000000e-01,
        1.00000000e00,
        1.00000000e00,
        1.00000000e00,
        1.00000000e00,
        1.00000000e00,
        1.00000000e00,
        2.50000000e-01,
        1.00000000e00,
        1.00000000e00,
        1.00000000e00,
        -1.00000000e00,
        -1.00000000e00,
        1.00000000e00,
        1.00000000e00,
        5.00000000e-03,
        -1.00000000e00,
        -1.00000000e00,
        1.00000000e00,
        1.00000000e00,
        -1.00000000e00,
        -1.00000000e00,
        1.00000000e00,
        1.00000000e00,
        5.00000000e-03,
        -1.00000000e00,
        -1.00000000e00,
        1.00000000e00,
        1.00000000e00,
        -1.00000000e00,
        -1.00000000e00,
        1.00000000e00,
        1.00000000e00,
        -1.00000000e00,
        -1.00000000e00,
        1.00000000e00,
        1.00000000e00,
        -1.00000000e00,
        -1.00000000e00,
        1.00000000e00,
        1.00000000e00,
        -1.00000000e00,
        -1.00000000e00,
        1.00000000e00,
        1.00000000e00,
        -1.00000000e00,
        -1.00000000e00,
        1.00000000e00,
        1.00000000e00,
        5.00000000e-03,
        -1.00000000e00,
        -1.00000000e00,
        1.00000000e00,
        1.00000000e00,
        -1.00000000e00,
        -1.00000000e00,
        1.00000000e00,
        1.00000000e00,
        5.00000000e-03,
        -1.00000000e00,
        -1.00000000e00,
        1.00000000e00,
        1.00000000e00,
        -1.00000000e00,
        -1.00000000e00,
        -1.00000000e00,
        -1.00000000e00,
        1.00000000e00,
        -1.00000000e00,
        -1.00000000e00,
        -1.00000000e00,
        -1.00000000e00,
        1.00000000e00,
        -1.00000000e00,
        -1.00000000e00,
        -1.00000000e00,
        -1.00000000e00,
        1.00000000e00,
        1.00000000e-04,
        -1.00000000e00,
        -1.00000000e00,
        -1.00000000e00,
        -1.00000000e00,
        1.00000000e00,
        -1.00000000e00,
        -1.00000000e00,
        -1.00000000e00,
        -1.00000000e00,
        1.00000000e00,
        -1.00000000e00,
        -1.00000000e00,
        -1.00000000e00,
        -1.00000000e00,
        1.00000000e00,
        -1.00000000e00,
        -1.00000000e00,
        -1.00000000e00,
        -1.00000000e00,
        -1.00000000e00,
        -1.00000000e00,
        -1.00000000e00,
        -1.00000000e00,
        -1.00000000e00,
        -1.00000000e00,
        -1.00000000e00,
        -1.00000000e00,
        -1.00000000e00,
        -1.00000000e00,
        -2.50000000e-01,
        -1.00000000e00,
        -2.50000000e-01,
        -1.00000000e00,
        -2.50000000e-01,
        -1.00000000e00,
        -2.50000000e-01,
        -1.00000000e00,
        2.50000000e-01,
        -1.00000000e00,
        2.50000000e-01,
        -1.00000000e00,
        2.50000000e-01,
        -1.00000000e00,
        2.50000000e-01,
        -1.00000000e00,
        -1.00000000e00,
        -1.00000000e00,
        -1.00000000e00,
        -1.00000000e00,
        -1.00000000e00,
        -1.00000000e00,
        -1.00000000e00,
        -1.00000000e00,
        -1.00000000e00,
        -1.00000000e00,
        -5.00000000e-03,
        -1.00000000e00,
        5.00000000e-03,
        -1.00000000e00,
        -1.00000000e00,
        -1.00000000e00,
        -5.00000000e-03,
        -1.00000000e00,
        5.00000000e-03,
        -1.00000000e00,
        -5.55111512e-19,
        -1.00000000e00,
        5.55111512e-19,
        -1.00000000e00,
        -5.55111512e-19,
        -1.00000000e00,
        5.55111512e-19,
        -1.00000000e00,
        -5.55111512e-19,
        -1.00000000e00,
        5.55111512e-19,
        -1.00000000e00,
        -5.55111512e-19,
        -1.00000000e00,
        5.55111512e-19,
        -1.00000000e00,
        -1.00000000e00,
        -1.00000000e00,
        -5.00000000e-03,
        -1.00000000e00,
        5.00000000e-03,
        -1.00000000e00,
        -1.00000000e00,
        -1.00000000e00,
        -5.00000000e-03,
        -1.00000000e00,
        5.00000000e-03,
        -1.00000000e00,
        1.00000000e-04,
        -1.00000000e00,
        -1.00000000e00,
        -1.00000000e00,
        -1.00000000e-04,
        -1.00000000e00,
        -1.00000000e00,
        -1.00000000e00,
    ]
)

test_upwind_coupling_3d_2d_1d_0d_lhs = sps.csr_matrix(
    (data, indices, indptr), shape=(81, 81)
)
test_upwind_coupling = {
    "test_3d_2d_1d_0d": {"lhs": test_upwind_coupling_3d_2d_1d_0d_lhs}
}
