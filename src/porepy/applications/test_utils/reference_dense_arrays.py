"""Expected values for the tests are collected in this file.

For each test file, there should be a dictionary with the name of the test file. Inside
this dictionary, there should be a dictionary with the name of the test function/class,
containing the expected values for the test named according to what they are compared
to.

"""
import numpy as np

# test_mpsa.py
_grad_bound_known = np.array(
    [
        [0.10416667, 0.0, 0.0, 0.0, 0.0, -0.02083333, 0.0, 0.0],
        [0.0, 0.25, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        [0.10416667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02083333],
        [0.0, 0.25, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        [0.0, 0.0, 0.10416667, 0.0, 0.0, 0.02083333, 0.0, 0.0],
        [0.0, 0.0, 0.0, 0.25, 0.0, 0.0, 0.0, 0.0],
        [0.0, 0.0, 0.10416667, 0.0, 0.0, 0.0, 0.0, -0.02083333],
        [0.0, 0.0, 0.0, 0.25, 0.0, 0.0, 0.0, 0.0],
        [0.0, 0.0, 0.0, 0.0, 0.25, 0.0, 0.0, 0.0],
        [-0.02083333, 0.0, 0.0, 0.0, 0.0, 0.10416667, 0.0, 0.0],
        [0.0, 0.0, 0.0, 0.0, 0.25, 0.0, 0.0, 0.0],
        [0.0, 0.0, 0.02083333, 0.0, 0.0, 0.10416667, 0.0, 0.0],
        [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.25, 0.0],
        [0.02083333, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.10416667],
        [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.25, 0.0],
        [0.0, 0.0, -0.02083333, 0.0, 0.0, 0.0, 0.0, 0.10416667],
    ]
)
_grad_cell = np.array(
    [
        [1.0, 0.0],
        [0.0, 1.0],
        [1.0, 0.0],
        [0.0, 1.0],
        [1.0, 0.0],
        [0.0, 1.0],
        [1.0, 0.0],
        [0.0, 1.0],
        [1.0, 0.0],
        [0.0, 1.0],
        [1.0, 0.0],
        [0.0, 1.0],
        [1.0, 0.0],
        [0.0, 1.0],
        [1.0, 0.0],
        [0.0, 1.0],
    ]
)
test_mpsa = {
    "MpsaReconstructBoundaryDisplacement": {
        "test_cart_2d": {
            "grad_bound_known": _grad_bound_known,
            "grad_cell_known": _grad_cell,
        },
    }
}
# test_mpfa.py
_grad_bound = np.array(
    [
        [-0.25, 0.0, 0.0, 0.0],
        [0.0, -0.25, 0.0, 0.0],
        [0.0, 0.0, -0.25, 0.0],
        [0.0, 0.0, 0.0, -0.25],
    ]
)
_D_g = np.array(
    [
        [-1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        [0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0],
        [0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0],
        [0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0],
        [0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0],
        [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0],
    ]
)
test_mpfa = {
    "TestMpfaPressureReconstructionMatrices": {
        "test_cart_2d": {
            "grad_bound": _grad_bound,
            "D_g": _D_g,
        },
    }
}
_D_g = np.array(
    [
        [-1 / 6, -1 / 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0],
        [0, 0, -1 / 6, -1 / 3, 0, 0, 0, 0, 0, 0, 0, 0.0],
        [0, 0, 0, 0, 0, 0, -1 / 3, -1 / 6, 0, 0, 0, 0.0],
        [0, 0, 0, 0, 0, 0, 0, 0, -1 / 3, -1 / 6, 0, 0.0],
        [-1 / 12, 1 / 12, 0, 0, 0, 0, 1 / 12, -1 / 12, 0, 0, 0, 0],
        [0, 0, 0, 0, -1 / 12, 1 / 12, 0, 0, 0, 0, 1 / 12, -1 / 12],
        [0, 0, 1 / 3, 1 / 6, 0, 0, 0, 0, 0, 0, 0, 0.0],
        [0, 0, 0, 0, 1 / 3, 1 / 6, 0, 0, 0, 0, 0, 0.0],
        [0, 0, 0, 0, 0, 0, 0, 0, 1 / 6, 1 / 3, 0, 0.0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 / 6, 1 / 3],
    ]
)

_CC = np.array(
    [
        [1, 0.0],
        [1, 0.0],
        [0, 1.0],
        [0, 1.0],
        [0.5, 0.5],
        [0.5, 0.5],
        [1, 0.0],
        [1, 0.0],
        [0, 1.0],
        [0, 1.0],
    ]
)
test_mpfa["TestMpfaPressureReconstructionMatrices"]["test_simplex_2d"] = {
    "D_g": _D_g,
    "CC": _CC,
}


_D_g = np.array(
    [
        [-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
    ]
)

_CC = np.array(
    [
        [1],
        [1],
        [1],
        [1],
        [1],
        [1],
        [1],
        [1],
        [1],
        [1],
        [1],
        [1],
        [1],
        [1],
        [1],
        [1],
        [1],
        [1],
        [1],
        [1],
        [1],
        [1],
        [1],
        [1],
    ]
)
test_mpfa["TestMpfaPressureReconstructionMatrices"]["test_cart_3d"] = {
    "D_g": _D_g,
    "CC": _CC,
}

test_mpfa["TestMpfaReproduceKnownValues"] = {}
test_mpfa["TestMpfaReproduceKnownValues"]["cart_homogeneous"] = {
    "u": np.array(
        [
            0.11215902,
            0.37777176,
            0.61052237,
            0.77095723,
            0.09728957,
            0.36730807,
            0.56046212,
            0.70182774,
            0.10112506,
            0.31733332,
            0.47708993,
            0.60621791,
            0.06218831,
            0.23226929,
            0.36654522,
            0.49221303,
        ]
    ),
    "flux": np.array(
        [
            -0.22614269,
            -0.23671876,
            -0.16849627,
            -0.21205881,
            -0.19724312,
            -0.25489906,
            -0.25400658,
            -0.20711298,
            -0.13397631,
            -0.07618574,
            -0.13563931,
            -0.20535843,
            -0.16753938,
            -0.17611844,
            -0.11203853,
            -0.2116459,
            -0.14134316,
            -0.1733023,
            -0.09103128,
            -0.1022011,
            -0.07195505,
            0.03399637,
            0.00940329,
            -0.04211765,
            -0.0475905,
            0.01355307,
            0.11901831,
            0.06015525,
            -0.0321949,
            0.02277024,
            0.09980502,
            0.07256712,
            0.05134825,
            0.02497919,
            0.15964945,
            0.08262653,
            -0.01126896,
            0.09066114,
            0.12487007,
            0.14794111,
        ]
    ),
}
test_mpfa["TestMpfaReproduceKnownValues"]["cart_heterogeneous"] = {
    "u": np.array(
        [
            3.91688459e-01,
            5.44014582e-01,
            -6.95254908e-01,
            -6.91407727e-01,
            5.27854234e-01,
            8.73164613e-01,
            -3.68081801e-01,
            -2.90171573e-01,
            -5.64748667e-01,
            -5.95331084e-01,
            7.16007640e05,
            7.52597195e05,
            -5.24438451e-01,
            -7.22016098e-01,
            4.95904641e05,
            5.32583312e05,
        ]
    ),
    "flux": np.array(
        [
            -1.11909891,
            -0.45106523,
            0.84944736,
            -0.06652199,
            -2.16807666,
            -1.12677713,
            -0.45344628,
            1.6102826,
            -0.03276262,
            -0.58079751,
            0.71460786,
            0.19652822,
            -1.35594388,
            -0.06197948,
            1.37532039,
            1.79954634,
            0.1518235,
            -1.12637603,
            -0.04696978,
            1.15521742,
            -1.64778558,
            -1.10489621,
            1.19653738,
            0.79433075,
            -0.27014072,
            -0.47589136,
            -0.49921764,
            -0.38658258,
            1.8201197,
            0.88930865,
            -1.29370566,
            -1.32735917,
            -0.10266602,
            0.08101587,
            0.32309499,
            0.33810848,
            -0.61819902,
            -1.65272094,
            1.14414139,
            1.18782153,
        ]
    ),
}

test_mpfa["TestMpfaReproduceKnownValues"]["simplex_homogeneous"] = {
    "u": np.array(
        [
            0.16107635,
            0.04460227,
            0.44388758,
            0.34038129,
            0.63045801,
            0.56741841,
            0.79083512,
            0.73753872,
            0.14570593,
            0.06198251,
            0.39847451,
            0.31697368,
            0.58878597,
            0.52329375,
            0.74148373,
            0.65776383,
            0.12987879,
            0.03270606,
            0.37239417,
            0.26970513,
            0.51268517,
            0.44713568,
            0.64796637,
            0.56339303,
            0.08862535,
            0.03561036,
            0.26618302,
            0.18073226,
            0.41137445,
            0.33476786,
            0.53204111,
            0.44254309,
        ]
    ),
    "flux": np.array(
        [
            0.07224276,
            -0.22520049,
            -0.17438399,
            -0.03106521,
            -0.23518914,
            -0.21772969,
            -0.00907209,
            -0.16780779,
            -0.26366039,
            0.04119693,
            -0.2113708,
            -0.21537036,
            -0.19676077,
            0.04846246,
            -0.25316387,
            -0.21519289,
            -0.01138746,
            -0.25353288,
            -0.25465231,
            -0.11863116,
            -0.20781077,
            -0.28400782,
            -0.06103447,
            -0.1345499,
            -0.17170964,
            -0.0746532,
            0.03170599,
            -0.13539543,
            -0.18490946,
            -0.02175786,
            -0.20407522,
            -0.2084673,
            -0.09926638,
            -0.16599291,
            -0.29765445,
            -0.07124824,
            -0.17482109,
            -0.21936224,
            -0.11164636,
            -0.05092288,
            -0.21120468,
            -0.19719789,
            -0.02376679,
            -0.14079355,
            -0.21939472,
            -0.15935784,
            -0.17298347,
            -0.27041779,
            -0.08215586,
            -0.09058382,
            -0.21516999,
            -0.10237499,
            0.01166704,
            -0.08984219,
            -0.12449397,
            -0.14809246,
        ]
    ),
}
test_mpfa["TestMpfaReproduceKnownValues"]["simplex_heterogeneous"] = {
    "u": np.array(
        [
            3.23882374e-01,
            2.00141263e-01,
            4.89788221e-02,
            6.50248262e-01,
            -6.26582286e-01,
            -5.85645414e-01,
            -2.23206214e-01,
            -8.61911020e-01,
            7.68008367e-01,
            1.55728946e-01,
            6.74836809e-01,
            5.99591360e-01,
            -7.17121651e-01,
            -2.80544428e-01,
            -3.19433071e-01,
            -3.13312194e-01,
            -5.27341943e-01,
            -2.21703640e-01,
            -1.48524532e-01,
            -7.68503490e-01,
            9.04646914e-07,
            7.97365667e-07,
            3.23832023e-07,
            1.01162732e-06,
            -6.70554892e-01,
            -1.62657580e-01,
            -5.00531058e-01,
            -4.89809540e-01,
            7.41287855e-07,
            2.59896652e-07,
            4.68358154e-07,
            3.56771478e-07,
        ]
    ),
    "flux": np.array(
        [
            1.50682603,
            -1.01692398,
            -0.0436895,
            0.9552813,
            -0.54725235,
            1.65342246,
            -1.27117394,
            0.83402579,
            0.25889507,
            -0.69655085,
            -0.01292093,
            -1.91889083,
            -2.01822556,
            0.46218259,
            -0.95069045,
            -1.89315773,
            0.30483903,
            -0.28695981,
            -0.11899968,
            0.32077122,
            1.63225913,
            1.56757238,
            0.48490227,
            -0.11766933,
            0.36985968,
            -0.73307357,
            -1.6860483,
            0.67473777,
            0.27357371,
            -0.8401944,
            0.29960646,
            -1.64284045,
            0.9733459,
            -1.13761907,
            -0.51436174,
            1.13192358,
            0.01456427,
            1.87705695,
            1.36198364,
            -0.02567319,
            1.68354502,
            1.67602555,
            0.11905926,
            0.06053962,
            0.24926609,
            -0.43280923,
            -1.14624988,
            -1.68966019,
            -0.58267543,
            0.04319606,
            -0.47524675,
            1.16926973,
            0.52939579,
            1.53356316,
            -1.16026059,
            -1.21286644,
        ]
    ),
}

## test_tags.py
test_tags = {}

_known_faces_2d_simplex = np.array(
    [
        True,
        True,
        False,
        True,
        False,
        False,
        True,
        False,
        False,
        True,
        False,
        True,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        True,
        False,
        True,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        True,
        True,
        True,
        True,
    ],
    dtype=bool,
)

_known_nodes_2d_simplex = np.array(
    [
        True,
        True,
        True,
        True,
        True,
        False,
        False,
        True,
        True,
        False,
        False,
        True,
        True,
        True,
        True,
        True,
    ],
    dtype=bool,
)

test_tags["func_2d_simplex"] = {
    "known_faces": _known_faces_2d_simplex,
    "known_nodes": _known_nodes_2d_simplex,
}

_known_faces_2d_cartesian = np.array(
    [
        True,
        False,
        False,
        False,
        True,
        True,
        False,
        False,
        False,
        True,
        True,
        False,
        False,
        False,
        True,
        True,
        False,
        False,
        False,
        True,
        True,
        True,
        True,
        True,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        True,
        True,
        True,
        True,
    ],
    dtype=bool,
)
_known_nodes_2d_cartesian = np.array(
    [
        True,
        True,
        True,
        True,
        True,
        True,
        False,
        False,
        False,
        True,
        True,
        False,
        False,
        False,
        True,
        True,
        False,
        False,
        False,
        True,
        True,
        True,
        True,
        True,
        True,
    ],
    dtype=bool,
)

test_tags["func_2d_cartesian"] = {
    "known_faces": _known_faces_2d_cartesian,
    "known_nodes": _known_nodes_2d_cartesian,
}

_known_faces_3d_simplex = np.array(
    [
        True,
        True,
        True,
        True,
        True,
        True,
        False,
        False,
        False,
        False,
        True,
        False,
        False,
        True,
        False,
        False,
        True,
        False,
        True,
        False,
        False,
        True,
        False,
        True,
        True,
        True,
        False,
        True,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        True,
        False,
        False,
        True,
        False,
        False,
        True,
        False,
        False,
        False,
        True,
        True,
        True,
        False,
        False,
        True,
        False,
        True,
        True,
        False,
        True,
        True,
        False,
        True,
        False,
        False,
        False,
        False,
        False,
        True,
        False,
        False,
        False,
        False,
        False,
        True,
        False,
        True,
        False,
        False,
        False,
        False,
        True,
        True,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        True,
        False,
        False,
        True,
        False,
        False,
        False,
        True,
        True,
        True,
        False,
        False,
        True,
        False,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
    ],
    dtype=bool,
)
_known_nodes_3d_simplex = np.array(
    [
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        False,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
    ],
    dtype=bool,
)

test_tags["func_3d_simplex"] = {
    "known_faces": _known_faces_3d_simplex,
    "known_nodes": _known_nodes_3d_simplex,
}

_known_faces_3d_cartesian = np.array(
    [
        True,
        False,
        False,
        False,
        True,
        True,
        False,
        False,
        False,
        True,
        True,
        False,
        False,
        False,
        True,
        True,
        False,
        False,
        False,
        True,
        True,
        False,
        False,
        False,
        True,
        True,
        False,
        False,
        False,
        True,
        True,
        False,
        False,
        False,
        True,
        True,
        False,
        False,
        False,
        True,
        True,
        False,
        False,
        False,
        True,
        True,
        False,
        False,
        False,
        True,
        True,
        False,
        False,
        False,
        True,
        True,
        False,
        False,
        False,
        True,
        True,
        False,
        False,
        False,
        True,
        True,
        False,
        False,
        False,
        True,
        True,
        False,
        False,
        False,
        True,
        True,
        False,
        False,
        False,
        True,
        True,
        True,
        True,
        True,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
    ],
    dtype=bool,
)
_known_nodes_3d_cartesian = np.array(
    [
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        False,
        False,
        False,
        True,
        True,
        False,
        False,
        False,
        True,
        True,
        False,
        False,
        False,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        False,
        False,
        False,
        True,
        True,
        False,
        False,
        False,
        True,
        True,
        False,
        False,
        False,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        False,
        False,
        False,
        True,
        True,
        False,
        False,
        False,
        True,
        True,
        False,
        False,
        False,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
    ],
    dtype=bool,
)
test_tags["func_3d_cartesian"] = {
    "known_faces": _known_faces_3d_cartesian,
    "known_nodes": _known_nodes_3d_cartesian,
}

# test_grid.py
test_grid = {}
_x = np.array(
    [0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2]
)
_y = np.array(
    [0, 0, 0, 1, 1, 1, 2, 2, 2, 0, 0, 0, 1, 1, 1, 2, 2, 2, 0, 0, 0, 1, 1, 1, 2, 2, 2]
)
_z = np.array(
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2]
)
test_grid["test_geometry_3d_unperturbed"] = {"x": _x, "y": _y, "z": _z}

_face_centers = np.array(
    [
        [
            0.33333333,
            0.33333333,
            0.0,
            0.66666667,
            0.33333333,
            0.33333333,
            1.0,
            0.66666667,
            0.66666667,
            0.33333333,
            0.66666667,
            0.33333333,
            0.0,
            0.66666667,
            1.0,
            0.66666667,
            0.33333333,
            0.66666667,
        ],
        [
            0.33333333,
            0.0,
            0.33333333,
            0.66666667,
            0.33333333,
            0.66666667,
            0.33333333,
            0.66666667,
            0.0,
            0.33333333,
            0.33333333,
            1.0,
            0.66666667,
            0.66666667,
            0.66666667,
            1.0,
            0.33333333,
            0.66666667,
        ],
        [
            0.0,
            0.33333333,
            0.33333333,
            0.0,
            0.33333333,
            0.33333333,
            0.33333333,
            0.33333333,
            0.66666667,
            0.66666667,
            0.66666667,
            0.33333333,
            0.66666667,
            0.66666667,
            0.66666667,
            0.66666667,
            1.0,
            1.0,
        ],
    ]
)
test_grid["test_geometry_tetrahedral_grid"] = {"face_centers": _face_centers}


# test_meshing.py
test_meshing = {
    "test_fracture_and_boundary_face_tags_2d_domain_x_intersection": {
        "fracture_tags": np.array(
            [
                False,
                True,
                False,
                False,  # first row
                False,
                True,
                False,
                False,  # Second row
                False,
                False,
                False,
                False,  # third row
                False,
                False,
                False,  # Bottom column
                True,
                True,
                False,  # Second column
                False,
                False,
                False,  # Third column
                False,
                False,
                False,  # Top column
                True,
                True,
                True,
                True,
            ]
        ),
        "domain_boundary_tags": np.array(
            [
                True,
                False,
                False,
                True,  # first row
                True,
                False,
                False,
                True,  # Second row
                True,
                False,
                False,
                True,  # third row
                True,
                True,
                True,  # Bottom column
                False,
                False,
                False,  # Second column
                False,
                False,
                False,  # Third column
                True,
                True,
                True,  # Top column
                False,
                False,
                False,
                False,
            ]
        ),
    }
}


# test_fvutils.py
_neu_inds = np.array(
    [
        30,
        31,
        36,
        37,
        38,
        39,
        44,
        45,
        46,
        47,
        52,
        53,
        24,
        66,
        25,
        67,
        26,
        27,
        28,
        68,
        29,
        69,
    ]
)
_dir_inds = np.array(
    [
        0,
        1,
        6,
        7,
        8,
        9,
        14,
        15,
        16,
        17,
        22,
        23,
        24,
        54,
        25,
        55,
        26,
        56,
        27,
        57,
        28,
        58,
        29,
        59,
        72,
        73,
    ]
)
test_fvutils = {"test_bound_exclusion": {"neu_inds": _neu_inds, "dir_inds": _dir_inds}}
